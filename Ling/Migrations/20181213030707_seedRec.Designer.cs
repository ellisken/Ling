// <auto-generated />
using Ling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ling.Migrations
{
    [DbContext(typeof(LingDbContext))]
    [Migration("20181213030707_seedRec")]
    partial class seedRec
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ling.Models.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName");

                    b.Property<string>("ISOCode");

                    b.Property<string>("OriginalName");

                    b.Property<string>("Romanized");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new { ID = 1, EnglishName = "German (Germany)", ISOCode = "de-de", OriginalName = "Deutsch (Deutschland)" },
                        new { ID = 2, EnglishName = "Japanese (Japan)", ISOCode = "ja-JP", OriginalName = "日本語（日本）" },
                        new { ID = 3, EnglishName = "English (Canada)", ISOCode = "en-CA", OriginalName = "English (Canada)" },
                        new { ID = 4, EnglishName = "English (Great Britain)", ISOCode = "en-GB", OriginalName = "English (Great Britain)" },
                        new { ID = 5, EnglishName = "English (India)", ISOCode = "en-IN", OriginalName = "English (India)" },
                        new { ID = 6, EnglishName = "English (United States)", ISOCode = "en-US", OriginalName = "English (United States)" },
                        new { ID = 7, EnglishName = "Spanish (Argentina)", ISOCode = "es-AR", OriginalName = "Español (Argentina)" },
                        new { ID = 8, EnglishName = "Spanish (Spain)", ISOCode = "es-es", OriginalName = "Español (España)" },
                        new { ID = 9, EnglishName = "Spanish (United States)", ISOCode = "es-US", OriginalName = "Español (Estados Unidos)" },
                        new { ID = 10, EnglishName = "Spanish (Mexico)", ISOCode = "es-mx", OriginalName = "Español (México)" },
                        new { ID = 11, EnglishName = "French (France)", ISOCode = "fr-fr", OriginalName = "Français (France)" },
                        new { ID = 12, EnglishName = "French (Canada)", ISOCode = "fr-ca", OriginalName = "Français (Canada)" },
                        new { ID = 13, EnglishName = "Arabic (United Arab Emirates)", ISOCode = "ar-AE", OriginalName = "العربية (الإمارات)" },
                        new { ID = 14, EnglishName = "Arabic (Saudi Arabia)", ISOCode = "ar-SA", OriginalName = "العربية (السعودية)" },
                        new { ID = 15, EnglishName = "Arabic (Egypt)", ISOCode = "ar-EG", OriginalName = "العربية (مصر)" },
                        new { ID = 16, EnglishName = "Bengali (Bangladesh)", ISOCode = "bn-BD", OriginalName = "বাংলা (বাংলাদেশ)" },
                        new { ID = 17, EnglishName = "Chinese", ISOCode = "cmn-Hans-CN", OriginalName = "普通话 (中国大陆)" },
                        new { ID = 18, EnglishName = "Chinese", ISOCode = "cmn-Hant-TW", OriginalName = "國語 (台灣)" },
                        new { ID = 19, EnglishName = "Hindi (India)", ISOCode = "hi-IN", OriginalName = "हिन्दी (भारत)" },
                        new { ID = 20, EnglishName = "Malay (Malaysia)", ISOCode = "ms-MY", OriginalName = "Bahasa Melayu (Malaysia)" },
                        new { ID = 21, EnglishName = "Swahili (Kenya)", ISOCode = "sw-KE", OriginalName = "Swahili (Kenya)" },
                        new { ID = 22, EnglishName = "Portuguese (Brazil)", ISOCode = "pt-br", OriginalName = "Português (Brasil)" },
                        new { ID = 23, EnglishName = "Portuguese (Portugal)", ISOCode = "pt-pt", OriginalName = "Português (Portugal)" },
                        new { ID = 24, EnglishName = "Polish (Poland)", ISOCode = "pl-PL", OriginalName = "Polski (Polska)" },
                        new { ID = 25, EnglishName = "Russian (Russia)", ISOCode = "ru-ru", OriginalName = "Русский (Россия)" }
                    );
                });

            modelBuilder.Entity("Ling.Models.Recording", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<int>("LanguageID");

                    b.Property<string>("Transcription");

                    b.Property<string>("URI");

                    b.HasKey("ID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Recordings");

                    b.HasData(
                        new { ID = 1, FileName = "fr-sample.flac", LanguageID = 11, Transcription = "maître corbeau sur un arbre perché tenait en son bec un fromage", URI = "https://lingblob.blob.core.windows.net/soundrecording/fr-sample.flac" },
                        new { ID = 2, FileName = "those-internets.wav", LanguageID = 6, Transcription = "", URI = "https://lingblob.blob.core.windows.net/soundrecording/those-internets.wav" }
                    );
                });

            modelBuilder.Entity("Ling.Models.Recording", b =>
                {
                    b.HasOne("Ling.Models.Language", "Language")
                        .WithMany("Recordings")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
